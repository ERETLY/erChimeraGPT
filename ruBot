import logging
from aiogram import Bot, Dispatcher, types, executor
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.contrib.middlewares.fsm import FSMMiddleware
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
import aiohttp

import openai

TOKEN = 'ВАШ_БОТ_ТОКЕН'
openai.api_key = 'ВАШ_CHIMERA_АПИ_ТОКЕН'
openai.api_base = "https://chimeragpt.adventblocks.cc/v1"

available_models = [
    "gpt-4",
    "gpt-3.5-turbo",
    "claude-instant-100k",
    "claude-instant",
    "gpt-4-poe",
    "gpt-3.5-turbo-poe",
]

logging.basicConfig(level=logging.INFO)

bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)
dp.middleware.setup(LoggingMiddleware())
dp.middleware.setup(FSMMiddleware())

class ImagePrompt(StatesGroup):
    waiting_for_text = State()

class Tts(StatesGroup):
    waiting_for_tt = State()

user_states = {}

async def generate_speech(text: str):
    try:
        headers = {'Authorization': f'Bearer {openai.api_key}'}
        json_data = {'text': text, 'language': 'ru'} 
        async with aiohttp.ClientSession(headers=headers) as session:
            async with session.post('https://chimeragpt.adventblocks.cc/v1/audio/tts/generation', json=json_data) as resp:
                if resp.status == 200:
                    response = await resp.json()
                    return response
                else:
                    error_message = await resp.text()
                    raise Exception(f"Text-to-speech API returned non-200 status code: {resp.status}. Error: {error_message}")
    except Exception as e:
        raise Exception(f"Error in generating speech: {str(e)}")


async def start_dialog(user_id):
    user_data = user_states[user_id]
    if user_data['model']:
        await bot.send_message(user_id, 'Для начала завершите диалог.')
    else:
        model_keyboard = types.InlineKeyboardMarkup(row_width=1)
        model_buttons = [types.InlineKeyboardButton(model, callback_data=model) for model in available_models]
        model_keyboard.add(*model_buttons)
        model_keyboard.add(types.InlineKeyboardButton('Создать изображение', callback_data='image_prompt'))
        model_keyboard.add(types.InlineKeyboardButton('Озвучить текст', callback_data='tts'))
        await bot.send_message(user_id, f'Пожалуйста, выберите модель или нажмите кнопку "Создать изображение" или "Озвучить текст":', reply_markup=model_keyboard)

@dp.message_handler(commands=['start'])
async def handle_start(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    user = message.from_user
    user_states[user_id] = {'model': None, 'button_sent': False, 'conversation': []}
    await message.answer(f"Привет, {user.first_name}! Я модель ChatGPT-4. Создан разработчиками OpenAI.", reply_markup=get_start_dialog_keyboard())
    await start_dialog(user_id)

@dp.callback_query_handler(lambda query: query.data in available_models or query.data == 'image_prompt' or query.data == 'tts')
async def select_model_or_image_prompt(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id

    if user_id not in user_states:
        user_states[user_id] = {'model': None, 'button_sent': False, 'conversation': []}

    await callback_query.answer()
    if callback_query.data == 'image_prompt':
        await callback_query.message.answer("Введите текст для промпта:")
        await ImagePrompt.waiting_for_text.set()
        user_states[user_id]['model'] = None
        cancel_button = KeyboardButton("Завершить диалог")
        cancel_markup = ReplyKeyboardMarkup(resize_keyboard=True).add(cancel_button)
        await callback_query.message.answer('Вы можете завершить диалог, нажав кнопку "Завершить диалог".', reply_markup=cancel_markup)
        user_states[user_id]['button_sent'] = True
    elif callback_query.data == 'tts':
        await callback_query.message.answer("Введите текст для озвучки:")
        await Tts.waiting_for_tt.set()
        user_states[user_id]['model'] = None
        cancel_button = KeyboardButton("Завершить диалог")
        cancel_markup = ReplyKeyboardMarkup(resize_keyboard=True).add(cancel_button)
        await callback_query.message.answer('Вы можете завершить диалог, нажав кнопку "Завершить диалог".', reply_markup=cancel_markup)
        user_states[user_id]['button_sent'] = True
    else:
        selected_model = callback_query.data
        user_states[user_id]['model'] = selected_model
        await callback_query.message.edit_text(f'Выбранная модель: {selected_model}.\nОтправьте сообщение, чтобы начать диалог.')
        cancel_button = KeyboardButton("Завершить диалог")
        cancel_markup = ReplyKeyboardMarkup(resize_keyboard=True).add(cancel_button)
        await callback_query.message.answer('Вы можете завершить диалог, нажав кнопку "Завершить диалог".', reply_markup=cancel_markup)
        user_states[user_id]['button_sent'] = True
      

@dp.message_handler(state=ImagePrompt.waiting_for_text)
async def process_text(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    user_data = user_states.get(user_id, {})
    if message.text.lower() == 'завершить диалог':
        await state.finish()
        user_states[user_id] = {'model': None, 'button_sent': False, 'conversation': []}
        await message.reply('Диалог завершен. Вы можете начать новый диалог, нажав кнопку "Начать диалог".', reply_markup=get_start_dialog_keyboard())
        return
    try:
        prompt_text = message.text
        response = openai.Image.create(
            prompt=prompt_text,
            n=4,
            size="1024x1024"
        )
        for image in response['data']:
            await bot.send_photo(message.chat.id, photo=image['url'])

    except openai.error.APIError as e:
        error_message = "Произошла ошибка при создании изображения: "
        if hasattr(e, 'response') and 'detail' in e.response:
            error_message += e.response['detail']
        else:
            error_message += str(e)
        await message.answer(error_message)

@dp.message_handler(lambda message: message.text.lower() == 'завершить диалог')
async def cancel(message: types.Message):
    user_id = message.from_user.id
    user_data = user_states.get(user_id)
    if user_data and user_data.get('button_sent'):
        user_states[user_id] = {'model': None, 'button_sent': False, 'conversation': []}
        await message.answer('Диалог завершен. Вы можете начать новый диалог, нажав кнопку "Начать диалог".', reply_markup=get_start_dialog_keyboard())
    else:
        await message.reply('Сейчас нет активного диалога.')


class TtsLanguage(StatesGroup):
    waiting_for_language = State()


@dp.message_handler(state=Tts.waiting_for_tt)
async def process_tts_text(message: types.Message, state: FSMContext):
    try:
        text = message.text

        if text.lower() == 'завершить диалог':
            await state.finish()
            user_id = message.from_user.id
            user_states[user_id]['model'] = None
            user_states[user_id]['button_sent'] = False
            await message.reply('Диалог завершен. Вы можете начать новый диалог, нажав кнопку "Начать диалог".', reply_markup=get_start_dialog_keyboard())
            return

        text = text.strip()

        if not text:
            text = "Please enter valid text."

        await generate_tts_for_text(text, message.chat.id)

    except:
        await bot.send_message(message.chat.id, "Ошибка при озвучке текста.")


async def generate_tts_for_text(text: str, chat_id: int):
   
    if text:
        resp = await generate_speech(text)
        url = resp['url']
        async with aiohttp.ClientSession() as session:
            response = await session.get(url)
        audio_file = await response.content.read()
        await bot.send_audio(chat_id, audio_file)


@dp.message_handler(content_types=types.ContentTypes.TEXT)
async def chat_message(message: types.Message):
    user_id = message.from_user.id
    user_data = user_states.get(user_id, {})
    model = user_data.get('model')
    if model:
        conversation = user_data['conversation']
        conversation.append({'role': 'user', 'content': message.text}) 
        response = openai.ChatCompletion.create(model=model, messages=conversation)
        ai_response = response.choices[0].message['content']
        await message.reply(ai_response)
        if not user_data.get('button_sent', False):
            cancel_button = KeyboardButton("Завершить диалог")
            cancel_markup = ReplyKeyboardMarkup(resize_keyboard=True).add(cancel_button)
            await message.answer('Вы можете завершить диалог, нажав кнопку "Завершить диалог".', reply_markup=cancel_markup)
            user_states[user_id]['button_sent'] = True
    else:
        model_keyboard = types.InlineKeyboardMarkup(row_width=1)
        model_buttons = [types.InlineKeyboardButton(model, callback_data=model) for model in available_models]
        model_keyboard.add(*model_buttons)
        model_keyboard.add(types.InlineKeyboardButton('Создать изображение', callback_data='image_prompt'))
        model_keyboard.add(types.InlineKeyboardButton('Озвучить текст', callback_data='tts'))
        await message.answer(f'Пожалуйста, выберите модель или нажмите кнопку "Создать изображение" или "Озвучить текст":', reply_markup=model_keyboard)

def get_start_dialog_keyboard():
    start_button = KeyboardButton("Начать диалог")
    start_markup = ReplyKeyboardMarkup(resize_keyboard=True).add(start_button)
    return start_markup

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
